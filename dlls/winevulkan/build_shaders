#!/usr/bin/env python3
#
# Copyright 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
#

import os
import subprocess
import itertools
import array

nvidia_spv_license = """/* The MIT License(MIT)
 *
 * Copyright(c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files(the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions :
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
"""

shader_compile_jobs = [
    {
        "name": "NIS",
        "path": "../../libs/nis/NIS/NIS_Main.glsl",
        "license": nvidia_spv_license,
        "options": [
            {
                "name": "NIS_USE_HALF_PRECISION",
                "values": [
                    {
                        "suffix": "fp32",
                        "value": "0"
                    },
                    {
                        "suffix": "fp16",
                        "value": "1"
                    }
                ]
            }
        ]
    }
]

def build_shader_permutations(options):
    option_values = []
    for option in options:
        option_values.append(option["values"])
    return itertools.product(*option_values)

def compile_shaders(job):
    permutations = build_shader_permutations(job["options"])
    built_shaders = []

    for permutation in permutations:
        output_name = job["name"]
        options = []

        for option_index in range(len(permutation)):
            option = permutation[option_index]
            option_name = job["options"][option_index]["name"]
            options.append("-D{0}={1}".format(option_name, option["value"]))
            if len(job["options"][option_index]["values"]) > 1:
                output_name += ".{0}".format(option["suffix"])

        output_name += ".spv"
        glslc_cmd = [
            "glslc",
            "-fshader-stage=comp",
            "-O",
            *options,
            job["path"],
            "-o",
            output_name
        ]

        print("{0}".format(" ".join(glslc_cmd)))
        if subprocess.call(glslc_cmd) == 0:
            built_shaders.append(output_name)
    
    return built_shaders

def generate_spv_headers(job, spv_files):
    for spv_file in spv_files:
        if not os.path.isfile(spv_file) and False:
            print("The file {0} does not exist.".format(spv_file))
            continue
        
        spv_size = os.path.getsize(spv_file)
        if spv_size % 4:
            print("File size is not aligned to 4 bytes, are we sure this is a spv file?")

        name = "_".join(spv_file.lower().split("."))
        header_file_name = name + ".h"
        print("Generating header {0}".format(header_file_name))

        values = array.array('I')
        with open(spv_file, 'rb') as spv:
            values.fromfile(spv, spv_size//4)

        with open(header_file_name, 'w') as header:
            header.write(job["license"])
            header.write("\n/*\n")
            header.write(" * This file is autogenerated from build_shaders\n")
            header.write(" * DO NOT EDIT\n")
            header.write(" */\n\n")

            include_guard_name = "__" + name.upper()
            header.write("#ifndef {0}\n".format(include_guard_name))
            header.write("#define {0}\n\n".format(include_guard_name))

            header.write("unsigned int {0}[] = {{\n    ".format(name))

            indent_index = 0
            for value in values:
                if indent_index == 8:
                    header.write("\n    ")
                    indent_index = 0
                header.write("0x{:08X}, ".format(value))
                indent_index += 1
            
            header.write("\n};\n\n")
            header.write("#endif\n")

def run_compile_jobs():
    for job in shader_compile_jobs:
        print("--- Compile {0} shader sources ---".format(job["name"]))
        built_shaders = compile_shaders(job)
        print("--- Generate {0} header files ---".format(job["name"]))
        generate_spv_headers(job, built_shaders)
    
def try_glslc():
    found = False
    try:
        subprocess.call(["glslc"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        found = True
    except FileNotFoundError:
        print("Could not find glslc please make sure it is part of your PATH.")
    return found

def main():
    if not try_glslc():
        exit(-1)
    run_compile_jobs()

if __name__ == "__main__":
    main()